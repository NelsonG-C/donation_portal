eaa:
  system_user:
    # Name of the user account under which EAA services will run. Note that
    # this only applies to EAA code and not dependent daemons (e.g.
    # PostgreSQL). These typically already have their own dedicated accounts.
    name: 'eaa'
    # Group of the user account under which EAA services will run. This is
    # usually the same as the user account name, but it's not a guarantee. If
    # undefined, we'll default to a group name matching the account name.
    group_name: ''
    # Full name of the user account
    full_name: 'Effective Altruism Australia'
    # Home directory of the user account
    home_dir: '/home/eaa'
    # Shell for the user account
    shell: '/bin/bash'
    # Should the user be created as a system user? This subtly modifies some
    # defaults that will be applied to the new user account. Consult adduser(8)
    # for the full details, but in short, you probably don't want this.
    system: False
    # When deploying EAA services should we execute deployment steps as the
    # user account? This is less secure but you almost definitely want this in
    # a development environment.
    deploy_as_user: True

  roles:
    web:
      # Should we install and configure Nginx as part of the Web role?
      install_nginx: False
      # Should we install and configure Supervisor as part of the Web role?
      install_supervisor: False

    settings:
      # Discard any local changes when checking out. This is generally a good
      # idea in a production environment and a very bad one in development!
      force_checkout: False
      # If the target directory already exists and isn't a Git repository then
      # remove it. This is potentially dangerous so use with caution!
      force_clone: False
      # Fetch even if we can't fast-forward. This would indicate someone has
      # done a force push and so you probably need to rebase. It's safer to
      # manually intervene at this point than try to handle it automatically.
      force_fetch: False
      # Hard-reset the local branch to the new remote revision if we can't
      # fast-forward. As per force_fetch, this is best dealt with manually.
      force_reset: False
      # Should we check out any submodules?
      submodules: False
  git:
    repositories:
      donation_portal:
        # Hostname of the Git server
        host: 'github.com'
        # URL of the Git repository
        source: 'git@github.com:effective-altruism-australia/donation_portal.git'
        # Path to clone the repository. If not specified we'll default to using
        # $HOME/$REPO, where $HOME is the home directory of the system_user
        # specified above and $REPO is the name of this repository definition.
        target: ''
        # Remote reference (branch/tag/commit hash) to checkout. Be sure to
        # also update the local_branch setting directly below!!
        remote_ref: 'master'
        # Local branch in which to operate in. The name of the local branch can
        # be completely different from the remote branch. In practise, you
        # almost never want this, and so this should be equal to remote_ref.
        local_branch: 'master'
        # By default we assume the private key for accessing Git is already
        # present under $HOME/.ssh/id_rsa, where $HOME is the home directory of
        # the system_user specified above if deploy_as_user is true. Otherwise,
        # $HOME will be the home directory of the root user. Alternatively, you
        # can specify a private key file here.
        private_key_file: ''
        # If you'd like Salt to automatically create the private key file for
        # you then specify the Base64 encoded private key below. If you have
        # configured private_key_file above, we'll use that location as the
        # path to store the private key. If not, we'll use the above default.
        #private_key: |
        #  -----BEGIN RSA PRIVATE KEY-----
        #  -----END RSA PRIVATE KEY-----

  django:
    # The path to where we'll create the virtualenv for the Django application.
    # If not specified we'll use the default of $HOME/.virtualenvs/donations,
    # where $HOME is the home directory of the system_user specified above.
    venv_path: ''

    debug: True
    secret_key: 'development'
    ssl_security_checks_enabled: False

    # The environment to run the Draftable Django application under:
    # - dev
    # - testing
    # - prod
    default_env: 'dev'

    # The database connection details for the Django application. Note that
    # these settings should be in sync with those in the PostgreSQL pillar.
    databases:
      default:
        # The name of the database to connect to
        name: 'donations'
        # The user account to use on the database server
        user: 'eaa'
        # The password for the user account. This should be optional in a default
        # configuration as the database server will be on the same system as the
        # Django app. As such, we'll just use PostgreSQL's peer authentication.
        password: ''
        # The host address of the database server. This should be optional in a
        # default configuration as when not specified it defaults to using a UNIX
        # socket, which will work when the database server is on the same system.
        host: ''
        # The TCP port to use to connect to the database server. Defaults to 5432
        # when not specified, but should be irrelevant in a default development
        # environment as we'll be using a UNIX socket for the connection anyway.
        port: ''

    # The Redis connection details for the Django application
    redis:
      # The host address of the Redis server
      host: 'localhost'

    pinpayments:
      test_publishable_key: 'pk_-5vycWMmikY7yS6e2mMG9Q'
      test_secret_key: 'oJTmQLp3uYWFsFSXZxOOXw'
      live_publishable_key: 'override in local_settings.py if you need it'
      live_secret_key: 'override in local_settings.py if you need it'
      default_environment: 'test'

    postmark:
      api_key: ''
      sender: 'donations@eaa.org.au'
      test_mode: True
      track_opens: False

    xero:
      rsa_key: 'BIG SECRET'
      consumer_key: 'BIG SECRET'
      incoming_account_id: '7ee22f07-ffce-4369-a9b3-dc3ce4fa7609'
      days_to_import: '300'

    # Should we enable reporting of exceptions to Sentry?
    enable_sentry: False
    sentry:
        dsn: ''
        public_dsn: ''

postgresql:
  use_pgdg_repo: True
  lookup:
    version: '9.4'

nginx:
  # Custom settings for the server configuration file
  conf_settings:
    http:
      proxy_cache_path: '/var/cache/nginx levels=1:2 keys_zone=static-cache:8m max_size=1000m inactive=600m'
      proxy_temp_path: '/var/cache/nginx/tmp'
      gzip_comp_level: '6'
      gzip_proxied: 'any'
      gzip_static: 'on'
      gzip_vary: 'on'

  virtual_hosts:
    # Donations virtual host definition
    eaa:
      site_available: False
      site_enabled: False
      conf_template: 'salt://eaa/web/templates/nginx-site.jinja'
      conf_settings:
        check_x_forwarded_proto_header: False
        server:
          donations:
            server_name: 'donations.local'
            root: ''
        upstream:
          donations:
            server: '127.0.0.1:8000'

nodejs:
  # Use the NodeSource repository
  use_nodesource_repo: True
  # Branch of Node.js we wish to use. This only needs to be set when using the
  # NodeSource repository. Consult the documentation for available branches:
  # https://github.com/nodesource/distributions#manual-installation
  nodesource_repo_branch: 'node_8.x'

# vim: cc=80 tw=79 ts=2 sw=2 sts=2 et sr
