# Django configuration for EAA donation portal
#
# ***** DO NOT EDIT THIS FILE *****
#
# This file is managed by Salt via {{ source }}

import os
import datetime
from settings import BASE_DIR

#############################
### General Configuration ###
#############################

# Debug mode (do *not* use in production)
DEBUG = {{ config.django.debug }}

# Directory where static files are collected and served from
STATIC_ROOT = os.path.join(BASE_DIR, 'tmp/static')

# Date from which to start sending receipts automatically (inclusive)
AUTOMATION_START_DATE = datetime.date(2016, 10, 12)


#######################
### Django Security ###
#######################

# Secret key used to provide cryptographic signing
SECRET_KEY = '{{ config.django.secret_key }}'

{% if config.django.allowed_hosts %}
# List of domains that the Django site is permitted to serve
ALLOWED_HOSTS = [
    {% for allowed_host in config.django.allowed_hosts %}
    '{{ allowed_host }}',
    {% endfor %}
]

{% endif %}
{% if config.django.ssl_security_checks_enabled %}
# Tuple of a HTTP header/value pair that signifies a request is secure. This is
# particularly useful if we're behind a reverse proxy which terminates any TLS
# connections (i.e. the proxy <-> Django connection is *not* itself secured).
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Advise Django that the URL scheme should always be considered to be HTTPS.
import os
os.environ['HTTPS'] = os.environ.get('HTTPS', 'on')

# CSRF cookies may only be sent over HTTPS connections
CSRF_COOKIE_SECURE = True

# Session cookies may only be sent over HTTPS connections
SESSION_COOKIE_SECURE = True

{% endif %}

############################
### Database Connections ###
############################

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ config.django.databases.default.name }}',
        'USER': '{{ config.django.databases.default.user }}',
        'PASSWORD': '{{ config.django.databases.default.password }}',
        'HOST': '{{ config.django.databases.default.host }}',
        'PORT': '{{ config.django.databases.default.port }}',
    }
}


##############
### Celery ###
##############

{% set celery_result_backend = '' %}
{% if config.django.redis.password %}
{% set celery_result_backend = ':' ~ config.django.redis.password ~ '@' %}
{% endif %}
{% if config.django.redis.host %}
{% set celery_result_backend = celery_result_backend ~ config.django.redis.host %}
{% endif %}
{% if config.django.redis.port %}
{% set celery_result_backend = celery_result_backend ~ ':' ~ config.django.redis.port %}
{% endif %}
{% if config.django.redis.database %}
{% set celery_result_backend = celery_result_backend ~ '/' ~ config.django.redis.database %}
{% endif -%}

BROKER_URL = 'redis://{{ celery_result_backend }}'


#############
### Redis ###
#############

REDIS_HOST = '{{ config.django.redis.host }}'
{% if config.django.redis.port %}
REDIS_PORT = '{{ config.django.redis.port }}'
{% endif %}
{% if config.django.redis.database %}
REDIS_DB = '{{ config.django.redis.database }}'
{% endif %}


####################
### Pin Payments ###
####################

PIN_ENVIRONMENTS = {
        'test': {
            'key': '{{ config.django.pinpayments.test_publishable_key }}',
            'secret': '{{ config.django.pinpayments.test_secret_key }}',
            'host': 'test-api.pin.net.au',
        },
        'live': {
            'key': '{{ config.django.pinpayments.live_publishable_key }}',
            'secret': '{{ config.django.pinpayments.live_secret_key }}',
            'host': 'api.pin.net.au',
        },
    }

PIN_DEFAULT_ENVIRONMENT = '{{ config.django.pinpayments.default_environment }}'


################
### Postmark ###
################

EMAIL_BACKEND = 'postmark.django_backend.EmailBackend'
POSTMARK_API_KEY = '{{ config.django.postmark.api_key }}'
POSTMARK_SENDER = '{{ config.django.postmark.sender }}'
POSTMARK_TEST_MODE = {{ config.django.postmark.test_mode }}
POSTMARK_TRACK_OPENS = {{ config.django.postmark.track_opens }}


############
### Xero ###
############

XERO_RSA_KEY = """{{ config.django.xero.rsa_key }}"""
XERO_CONSUMER_KEY = '{{ config.django.xero.consumer_key }}'
XERO_INCOMING_ACCOUNT_ID = u'{{ config.django.xero.incoming_account_id }}'
XERO_DAYS_TO_IMPORT = {{ config.django.xero.days_to_import }}


##############
### Sentry ###
##############

# Enable Raven for reporting errors to Sentry
ENABLE_SENTRY = {{ config.django.enable_sentry }}

if ENABLE_SENTRY:
    # Use the Git commit SHA as the release tag if possible
    import raven
    release = None
    try:
        release = raven.fetch_git_sha(os.path.dirname(__file__))
    except:
        pass

    # Configure the DSN to be used for reporting
    SENTRY_DSN = '{{ config.django.sentry.dsn }}'
    SENTRY_PUBLIC_DSN = '{{ config.django.sentry.public_dsn }}'
    RAVEN_CONFIG = {
        'dsn': SENTRY_DSN,
        'release': release
    }


# vim: syntax=python cc=80 tw=79 ts=4 sw=4 sts=4 et sr
